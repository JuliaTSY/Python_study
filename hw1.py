# 1. Поработайте с переменными, создайте несколько, выведите на экран,
# запросите у пользователя несколько чисел и строк и сохраните в переменные, выведите на экран.

first = 1
second = "Second"
third = 7.8

print(str(first) + ", " + second + ", " + str(third))

int_user_a = int(input("Введите число a: "))
int_user_b = int(input("Введите число b: "))
str_user_a = input("Введите своё имя: ")
str_user_b = input("Введите свою фамилию: ")
print(int_user_a, int_user_b, str_user_a, str_user_b)

# 2. Пользователь вводит время в секундах. Переведите время в часы, минуты и секунды
# и выведите в формате чч:мм:сс. Используйте форматирование строк.

time_sec = int(input("Введите время в секундах: "))
time_hh = time_sec // 3600
time_mm = (time_sec-time_hh*3600) // 60
time_ss = time_sec -time_hh*3600-time_mm*60

print("Время в формате чч:мм:сс: ", str(time_hh) + ':' + str(time_mm) + ':' + str(time_ss))

# 3. Узнайте у пользователя число n. Найдите сумму чисел n + nn + nnn. Например,
# пользователь ввёл число 3. Считаем 3 + 33 + 333 = 369.
#
n = input("Введите целое положительное число n = ")
nn = n + n
nnn = n + n + n
sum_n = int(n) + int(nn) + int(nnn)
print("Сумма чисел {} + {} + {}".format(n, nn, nnn) + " = " + str(sum_n))

# 4. Пользователь вводит целое положительное число. Найдите самую большую цифру в числе.
# Для решения используйте цикл while и арифметические операции.

numb = int(input("Введите целое положительное число >>>"))
max_num = numb % 10  # находим последнюю цифру в числе, принимаем ее пока за максимум
numb = numb // 10  # отсекаем последнюю цифру
while numb > 0:  # пока остались цифры в числе
    if numb % 10 > max_num:  # если новая последняя цифра больше текущего максимум
        max_num = numb % 10  # то она становится новым максимумом
    numb = numb // 10  # снова отсекаем последнюю

print("Самая большая цифра в числе = "+str(max_num))

# 5. Запросите у пользователя значения выручки и издержек фирмы.
# Определите, с каким финансовым результатом работает фирма (прибыль — выручка больше издержек,
# или убыток — издержки больше выручки). Выведите соответствующее сообщение.
# Если фирма отработала с прибылью, вычислите рентабельность выручки (соотношение прибыли к выручке).
# Далее запросите численность сотрудников фирмы и определите прибыль фирмы в расчете на одного сотрудника.

profit = int(input("Введите значение выручки: "))
costs = int(input("Введите значение издержек: "))
fin_res = profit - costs

if fin_res < 0:
    print("Фрирма отработала в убыток :(. Убыток составил: " + str(0 - fin_res) + ' у.е')
else:
    print("Фирма отработала с прибылью :). Прибыль составила: " + str(fin_res) + ' у.е')
    rent = profit / costs
    print("Рентабельность составляет: " + "{:.2f}".format(rent))
    count_people = int(input("Введите численность сотрудников фирмы: "))
    relation = profit / count_people
    print("Прибыль в расчете на сотрудника: " + "{:.2f}".format(relation) + ' у.е/чел')

# 6. Спортсмен занимается ежедневными пробежками. В первый день его результат составил a километров.
# Каждый день спортсмен увеличивал результат на 10 % относительно предыдущего. Требуется определить
# номер дня, на который результат спортсмена составит не менее b километров.
# Программа должна принимать значения параметров a и b и выводить одно натуральное число — номер дня.

a = int(input("Введите результат 1-го дня (км) >>> "))
b = int(input("Введите желаемый результат (км)>>> "))
num_day = 1
print("{}-й день: {:.2f} км".format(num_day, a))
while a < b:
    a = a + 0.1 * a
    num_day += 1
    print("{}-й день: {:.2f} км".format(num_day, a))

print("Ответ: на {} день спортсмен достигнет результата - не менее {} км".format(num_day, b))
